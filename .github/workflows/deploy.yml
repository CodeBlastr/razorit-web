name: Deploy Frontend to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy React Frontend
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Validate Required Secrets
        run: |
          REQUIRED_SECRETS=("AWS_REGION" "ECR_REGISTRY" "ECR_REPOSITORY" "CLUSTER_NAME" "SERVICE_NAME" "TASK_FAMILY_FRONTEND" "VITE_API_BASE_URL" "VITE_SITE_NAME")
          for SECRET in "${REQUIRED_SECRETS[@]}"; do
            if [[ -z "${!SECRET}" ]]; then
              echo "ERROR: Secret $SECRET is not set. Deployment failed!"
              exit 1
            fi
          done
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
          TASK_FAMILY_FRONTEND: ${{ secrets.TASK_FAMILY_FRONTEND }}
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_SITE_NAME: ${{ secrets.VITE_SITE_NAME }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: razorit/web
          IMAGE_TAG: latest
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_SITE_NAME: ${{ secrets.VITE_SITE_NAME }}
        run: |
          echo "Building frontend with environment variables..."
          echo "VITE_API_BASE_URL=${VITE_API_BASE_URL}"
          echo "VITE_SITE_NAME=${VITE_SITE_NAME}"
          
          docker build --build-arg VITE_API_BASE_URL=$VITE_API_BASE_URL --build-arg VITE_SITE_NAME=$VITE_SITE_NAME \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.prod .

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Get Frontend Task Definition
        env:
          TASK_FAMILY_FRONTEND: ${{ secrets.TASK_FAMILY_FRONTEND }}
        run: |
          aws ecs describe-task-definition --task-definition $TASK_FAMILY_FRONTEND --query "taskDefinition" --output json > current-task-def.json

      - name: Extract and Verify Frontend Container Name
        run: |
          CONTAINERS=$(jq -r '.containerDefinitions[].name' current-task-def.json)
          echo "Found Containers in Frontend Task Definition: $CONTAINERS"

          FRONTEND_CONTAINER=$(echo "$CONTAINERS" | head -n1)  # Pick first available container

          if [[ -z "$FRONTEND_CONTAINER" ]]; then
            echo "ERROR: No containers found in frontend task definition!"
            exit 1
          fi

          echo "Using frontend container: $FRONTEND_CONTAINER"
          echo "FRONTEND_CONTAINER=$FRONTEND_CONTAINER" >> $GITHUB_ENV

      - name: Register New Task Definition for Frontend
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
          TASK_FAMILY_FRONTEND: ${{ secrets.TASK_FAMILY_FRONTEND }}
          LOG_GROUP_NAME: "/ecs/razorit-web-task"
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: razorit/web
          IMAGE_TAG: latest
        run: |
          jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" --arg FRONTEND_CONTAINER "$FRONTEND_CONTAINER" '
            .containerDefinitions |= map(
              if .name == $FRONTEND_CONTAINER then
                .image = $IMAGE |
                .logConfiguration = {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "'$LOG_GROUP_NAME'",
                    "awslogs-region": "'$AWS_REGION'",
                    "awslogs-stream-prefix": "ecs",
                    "awslogs-create-group": "true",
                    "mode": "non-blocking",
                    "max-buffer-size": "25m"
                  }
                }
              else . end
            ) | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' current-task-def.json > new-task-def.json

          cat new-task-def.json  # Debugging step

          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query "taskDefinition.taskDefinitionArn" --output text)

          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN --force-new-deployment
