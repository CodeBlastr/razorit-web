name: Deploy Frontend to AWS ECS

on:
  push:
    branches:
      - main  # Deploy when pushing to the main branch

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: production  # Ensure environment variables are accessible

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set Environment Variables
        run: |
          echo "NEXT_PUBLIC_RAZORIT_API_URL=${{ vars.NEXT_PUBLIC_RAZORIT_API_URL }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_RAZORIT_API_CLIENT_ID=${{ secrets.NEXT_PUBLIC_RAZORIT_API_CLIENT_ID }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_RAZORIT_API_CLIENT_SECRET=${{ secrets.NEXT_PUBLIC_RAZORIT_API_CLIENT_SECRET }}" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          echo "ECR_REGISTRY=${{ vars.ECR_REGISTRY }}"
          echo "ECR_REPOSITORY=${{ vars.ECR_REPOSITORY }}"
          
          docker build --build-arg NEXT_PUBLIC_RAZORIT_API_URL=${{ env.NEXT_PUBLIC_RAZORIT_API_URL }} \
                       --build-arg NEXT_PUBLIC_RAZORIT_API_CLIENT_ID=${{ env.NEXT_PUBLIC_RAZORIT_API_CLIENT_ID }} \
                       --build-arg NEXT_PUBLIC_RAZORIT_API_CLIENT_SECRET=${{ env.NEXT_PUBLIC_RAZORIT_API_CLIENT_SECRET }} \
                       -t ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest .
          
          docker push ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest
        env:
          ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}

      - name: Update ECS Service
        run: |
          echo "Cluster Name: ${{ env.CLUSTER_NAME }}"
          echo "Service Name: ${{ env.SERVICE_NAME }}"
          
          aws ecs update-service --cluster "${{ env.CLUSTER_NAME }}" --service "${{ env.SERVICE_NAME }}" --force-new-deployment
        env:
          CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
          SERVICE_NAME: ${{ vars.SERVICE_NAME }}
